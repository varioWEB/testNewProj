// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bnGmFYN1UUt3iuCFsqhSBQ
// Component: 5njABe8EyLqo

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: bnGmFYN1UUt3iuCFsqhSBQ/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: 5njABe8EyLqo/css

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
  freeBox?: Flex__<"div">;
  text?: Flex__<"div">;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              '<!DOCTYPE html>\r\n<html lang="en">\r\n<head>\r\n    <meta charset="UTF-8">\r\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\r\n    <style>\r\n\t\thtml,\r\n\t\tbody {\r\n\t\t  margin: 0;\r\n\t\t  background-color: #25003a;\r\n\t\t  overflow: hidden;\r\n\t\t}\r\n\r\n\t\tcanvas {\r\n\t\t  position: relative;\r\n\t\t  top: 0;\r\n\t\t  bottom: 0;\r\n\t\t  width: 100%;\r\n\t\t  height: 100%;\r\n\t\t  background-color: #25003a;\r\n\t\t  overflow: hidden;\r\n\t\t}\r\n\t</style>\r\n    <title>Document</title>\r\n</head>\r\n<body>\r\n    <canvas></canvas>\r\n\t<script>\r\n(function() {\r\n\r\n  var canvas, ctx, circ, nodes, mouse, SENSITIVITY, SIBLINGS_LIMIT, DENSITY, NODES_QTY, ANCHOR_LENGTH, MOUSE_RADIUS;\r\n\r\n  // how close next node must be to activate connection (in px)\r\n  // shorter distance == better connection (line width)\r\n  SENSITIVITY = 100;\r\n  // note that siblings limit is not \'accurate\' as the node can actually have more connections than this value that\'s because the node accepts sibling nodes with no regard to their current connections this is acceptable because potential fix would not result in significant visual difference \r\n  // more siblings == bigger node\r\n  SIBLINGS_LIMIT = 10;\r\n  // default node margin\r\n  DENSITY = 50;\r\n  // total number of nodes used (incremented after creation)\r\n  NODES_QTY = 0;\r\n  // avoid nodes spreading\r\n  ANCHOR_LENGTH = 20;\r\n  // highlight radius\r\n  MOUSE_RADIUS = 200;\r\n\r\n  circ = 2 * Math.PI;\r\n  nodes = [];\r\n\r\n  canvas = document.querySelector(\'canvas\');\r\n  resizeWindow();\r\n  mouse = {\r\n    x: canvas.width / 2,\r\n    y: canvas.height / 2\r\n  };\r\n  ctx = canvas.getContext(\'2d\');\r\n  if (!ctx) {\r\n    alert("Ooops! Your browser does not support canvas :\'(");\r\n  }\r\n\r\n  function Node(x, y) {\r\n    this.anchorX = x;\r\n    this.anchorY = y;\r\n    this.x = Math.random() * (x - (x - ANCHOR_LENGTH)) + (x - ANCHOR_LENGTH);\r\n    this.y = Math.random() * (y - (y - ANCHOR_LENGTH)) + (y - ANCHOR_LENGTH);\r\n    this.vx = Math.random() * 2 - 1;\r\n    this.vy = Math.random() * 2 - 1;\r\n    this.energy = Math.random() * 100;\r\n    this.radius = Math.random();\r\n    this.siblings = [];\r\n    this.brightness = 0;\r\n  }\r\n\r\n  Node.prototype.drawNode = function() {\r\n    var color = "rgba(255, 0, 0, " + this.brightness + ")";\r\n    ctx.beginPath();\r\n    ctx.arc(this.x, this.y, 2 * this.radius + 2 * this.siblings.length / SIBLINGS_LIMIT, 0, circ);\r\n    ctx.fillStyle = color;\r\n    ctx.fill();\r\n  };\r\n\r\n  Node.prototype.drawConnections = function() {\r\n    for (var i = 0; i < this.siblings.length; i++) {\r\n      var color = "rgba(255, 0, 0, " + this.brightness + ")";\r\n      ctx.beginPath();\r\n      ctx.moveTo(this.x, this.y);\r\n      ctx.lineTo(this.siblings[i].x, this.siblings[i].y);\r\n      ctx.lineWidth = 1 - calcDistance(this, this.siblings[i]) / SENSITIVITY;\r\n      ctx.strokeStyle = color;\r\n      ctx.stroke();\r\n    }\r\n  };\r\n\r\n  Node.prototype.moveNode = function() {\r\n    this.energy -= 2;\r\n    if (this.energy < 1) {\r\n      this.energy = Math.random() * 100;\r\n      if (this.x - this.anchorX < -ANCHOR_LENGTH) {\r\n        this.vx = Math.random() * 2;\r\n      } else if (this.x - this.anchorX > ANCHOR_LENGTH) {\r\n        this.vx = Math.random() * -2;\r\n      } else {\r\n        this.vx = Math.random() * 4 - 2;\r\n      }\r\n      if (this.y - this.anchorY < -ANCHOR_LENGTH) {\r\n        this.vy = Math.random() * 2;\r\n      } else if (this.y - this.anchorY > ANCHOR_LENGTH) {\r\n        this.vy = Math.random() * -2;\r\n      } else {\r\n        this.vy = Math.random() * 4 - 2;\r\n      }\r\n    }\r\n    this.x += this.vx * this.energy / 100;\r\n    this.y += this.vy * this.energy / 100;\r\n  };\r\n\r\n  function initNodes() {\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    nodes = [];\r\n    for (var i = DENSITY; i < canvas.width; i += DENSITY) {\r\n      for (var j = DENSITY; j < canvas.height; j += DENSITY) {\r\n        nodes.push(new Node(i, j));\r\n        NODES_QTY++;\r\n      }\r\n    }\r\n  }\r\n\r\n  function calcDistance(node1, node2) {\r\n    return Math.sqrt(Math.pow(node1.x - node2.x, 2) + (Math.pow(node1.y - node2.y, 2)));\r\n  }\r\n\r\n  function findSiblings() {\r\n    var node1, node2, distance;\r\n    for (var i = 0; i < NODES_QTY; i++) {\r\n      node1 = nodes[i];\r\n      node1.siblings = [];\r\n      for (var j = 0; j < NODES_QTY; j++) {\r\n        node2 = nodes[j];\r\n        if (node1 !== node2) {\r\n          distance = calcDistance(node1, node2);\r\n          if (distance < SENSITIVITY) {\r\n            if (node1.siblings.length < SIBLINGS_LIMIT) {\r\n              node1.siblings.push(node2);\r\n            } else {\r\n              var node_sibling_distance = 0;\r\n              var max_distance = 0;\r\n              var s;\r\n              for (var k = 0; k < SIBLINGS_LIMIT; k++) {\r\n                node_sibling_distance = calcDistance(node1, node1.siblings[k]);\r\n                if (node_sibling_distance > max_distance) {\r\n                  max_distance = node_sibling_distance;\r\n                  s = k;\r\n                }\r\n              }\r\n              if (distance < max_distance) {\r\n                node1.siblings.splice(s, 1);\r\n                node1.siblings.push(node2);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function redrawScene() {\r\n    resizeWindow();\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    findSiblings();\r\n    var i, node, distance;\r\n    for (i = 0; i < NODES_QTY; i++) {\r\n      node = nodes[i];\r\n      distance = calcDistance({\r\n        x: mouse.x,\r\n        y: mouse.y\r\n      }, node);\r\n      if (distance < MOUSE_RADIUS) {\r\n        node.brightness = 1 - distance / MOUSE_RADIUS;\r\n      } else {\r\n        node.brightness = 0;\r\n      }\r\n    }\r\n    for (i = 0; i < NODES_QTY; i++) {\r\n      node = nodes[i];\r\n      if (node.brightness) {\r\n        node.drawNode();\r\n        node.drawConnections();\r\n      }\r\n      node.moveNode();\r\n    }\r\n    requestAnimationFrame(redrawScene);\r\n  }\r\n\r\n  function initHandlers() {\r\n    document.addEventListener(\'resize\', resizeWindow, false);\r\n    canvas.addEventListener(\'mousemove\', mousemoveHandler, false);\r\n  }\r\n\r\n  function resizeWindow() {\r\n    canvas.width = window.innerWidth;\r\n    canvas.height = window.innerHeight;\r\n  }\r\n\r\n  function mousemoveHandler(e) {\r\n    mouse.x = e.clientX;\r\n    mouse.y = e.clientY;\r\n  }\r\n\r\n  initHandlers();\r\n  initNodes();\r\n  redrawScene();\r\n\r\n})();\r\n\t</script>\r\n</body>\r\n</html>\r\n\r\n'
            }
          />

          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {"hello world"}
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "embedHtml", "freeBox", "text"],
  embedHtml: ["embedHtml"],
  freeBox: ["freeBox", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  embedHtml: typeof Embed;
  freeBox: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    embedHtml: makeNodeComponent("embedHtml"),
    freeBox: makeNodeComponent("freeBox"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
